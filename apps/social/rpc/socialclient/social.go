// Code generated by goctl. DO NOT EDIT.
// Source: social.proto

package socialclient

import (
	"context"

	"app/apps/social/rpc/rpc"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	FriendListReq         = rpc.FriendListReq
	FriendListResp        = rpc.FriendListResp
	FriendPutInHandleReq  = rpc.FriendPutInHandleReq
	FriendPutInHandleResp = rpc.FriendPutInHandleResp
	FriendPutInListReq    = rpc.FriendPutInListReq
	FriendPutInListResp   = rpc.FriendPutInListResp
	FriendPutInReq        = rpc.FriendPutInReq
	FriendPutInResp       = rpc.FriendPutInResp
	FriendRequest         = rpc.FriendRequest
	Friends               = rpc.Friends
	GroupCreateReq        = rpc.GroupCreateReq
	GroupCreateResp       = rpc.GroupCreateResp
	GroupListReq          = rpc.GroupListReq
	GroupListResp         = rpc.GroupListResp
	GroupMemberListReq    = rpc.GroupMemberListReq
	GroupMemberListResp   = rpc.GroupMemberListResp
	GroupMembers          = rpc.GroupMembers
	GroupPutInHandleReq   = rpc.GroupPutInHandleReq
	GroupPutInHandleResp  = rpc.GroupPutInHandleResp
	GroupPutInListReq     = rpc.GroupPutInListReq
	GroupPutInListResp    = rpc.GroupPutInListResp
	GroupPutInReq         = rpc.GroupPutInReq
	GroupPutInResp        = rpc.GroupPutInResp
	GroupRequests         = rpc.GroupRequests
	Groups                = rpc.Groups

	Social interface {
		// 好友业务：请求添加好友、通过或拒绝申请、好有列表
		FriendPutIn(ctx context.Context, in *FriendPutInReq, opts ...grpc.CallOption) (*FriendPutInResp, error)
		FriendPutInHandle(ctx context.Context, in *FriendPutInHandleReq, opts ...grpc.CallOption) (*FriendPutInHandleResp, error)
		FriendList(ctx context.Context, in *FriendListReq, opts ...grpc.CallOption) (*FriendListResp, error)
		FriendPutInList(ctx context.Context, in *FriendPutInListReq, opts ...grpc.CallOption) (*FriendPutInListResp, error)
		// 群组业务：创建群组、修改群、群公告、申请群、加群请求列表、加群请求处理...
		GroupCreate(ctx context.Context, in *GroupCreateReq, opts ...grpc.CallOption) (*GroupCreateResp, error)
		GroupPutIn(ctx context.Context, in *GroupPutInReq, opts ...grpc.CallOption) (*GroupPutInResp, error)
		GroupPutInList(ctx context.Context, in *GroupPutInListReq, opts ...grpc.CallOption) (*GroupPutInListResp, error)
		GroupPutInHandle(ctx context.Context, in *GroupPutInHandleReq, opts ...grpc.CallOption) (*GroupPutInHandleResp, error)
		GroupList(ctx context.Context, in *GroupListReq, opts ...grpc.CallOption) (*GroupListResp, error)
		GroupMemberList(ctx context.Context, in *GroupMemberListReq, opts ...grpc.CallOption) (*GroupMemberListResp, error)
	}

	defaultSocial struct {
		cli zrpc.Client
	}
)

func NewSocial(cli zrpc.Client) Social {
	return &defaultSocial{
		cli: cli,
	}
}

// 好友业务：请求添加好友、通过或拒绝申请、好有列表
func (m *defaultSocial) FriendPutIn(ctx context.Context, in *FriendPutInReq, opts ...grpc.CallOption) (*FriendPutInResp, error) {
	client := rpc.NewSocialClient(m.cli.Conn())
	return client.FriendPutIn(ctx, in, opts...)
}

func (m *defaultSocial) FriendPutInHandle(ctx context.Context, in *FriendPutInHandleReq, opts ...grpc.CallOption) (*FriendPutInHandleResp, error) {
	client := rpc.NewSocialClient(m.cli.Conn())
	return client.FriendPutInHandle(ctx, in, opts...)
}

func (m *defaultSocial) FriendList(ctx context.Context, in *FriendListReq, opts ...grpc.CallOption) (*FriendListResp, error) {
	client := rpc.NewSocialClient(m.cli.Conn())
	return client.FriendList(ctx, in, opts...)
}

func (m *defaultSocial) FriendPutInList(ctx context.Context, in *FriendPutInListReq, opts ...grpc.CallOption) (*FriendPutInListResp, error) {
	client := rpc.NewSocialClient(m.cli.Conn())
	return client.FriendPutInList(ctx, in, opts...)
}

// 群组业务：创建群组、修改群、群公告、申请群、加群请求列表、加群请求处理...
func (m *defaultSocial) GroupCreate(ctx context.Context, in *GroupCreateReq, opts ...grpc.CallOption) (*GroupCreateResp, error) {
	client := rpc.NewSocialClient(m.cli.Conn())
	return client.GroupCreate(ctx, in, opts...)
}

func (m *defaultSocial) GroupPutIn(ctx context.Context, in *GroupPutInReq, opts ...grpc.CallOption) (*GroupPutInResp, error) {
	client := rpc.NewSocialClient(m.cli.Conn())
	return client.GroupPutIn(ctx, in, opts...)
}

func (m *defaultSocial) GroupPutInList(ctx context.Context, in *GroupPutInListReq, opts ...grpc.CallOption) (*GroupPutInListResp, error) {
	client := rpc.NewSocialClient(m.cli.Conn())
	return client.GroupPutInList(ctx, in, opts...)
}

func (m *defaultSocial) GroupPutInHandle(ctx context.Context, in *GroupPutInHandleReq, opts ...grpc.CallOption) (*GroupPutInHandleResp, error) {
	client := rpc.NewSocialClient(m.cli.Conn())
	return client.GroupPutInHandle(ctx, in, opts...)
}

func (m *defaultSocial) GroupList(ctx context.Context, in *GroupListReq, opts ...grpc.CallOption) (*GroupListResp, error) {
	client := rpc.NewSocialClient(m.cli.Conn())
	return client.GroupList(ctx, in, opts...)
}

func (m *defaultSocial) GroupMemberList(ctx context.Context, in *GroupMemberListReq, opts ...grpc.CallOption) (*GroupMemberListResp, error) {
	client := rpc.NewSocialClient(m.cli.Conn())
	return client.GroupMemberList(ctx, in, opts...)
}
